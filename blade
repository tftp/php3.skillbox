Синтаксис Blade
	@foreach($tasks as $task)
	@endforeach

	@if ()
	@endif

	@while ()
	@endwhile

	Работа с шаблонами.
		Создаем шаблон layout.blade.php в котором есть шаблон html5, в теге body добавим
			<body>
				@yield('content')
			</body>

		 теперь в другом шаблоне welcome сошлемся на шаблон layout
			@extends('layout')
			@section('content')
				Какой то текст
			@endsection

		если вынести часть кода в другой файл, например layout.nav (в директории layout файл nav.blade.php)
		то можно этот файл подключить командой
			@include('layout.nav')

		Итого общий вид шаблона layout.blade.php будет
			<body>
				@include('layout.nav')
				@yield('content')
				@include('layout.footer')
			</body>

	Работа с формами:
		При работе с формами нужно добавить сигнатуру @csrf
		Подробности https://laravel.com/docs/8.x/csrf

	Работа с временем
		{{ $task->create_at->format('d.m.Y h:i:s') }}
	или
		{{ $task->create_at->toFormattedDateString() }}
		

	Указание метода отправки данных в форме:
		в форме указываем 
			<form method='post'>
				@csrf
				@method('PATCH') // указание какой метод использует форма
			</form>

	Для сохранения старых данных в форме:
		<input type='text' value="{{ old('title', $task->title) }}">

	Вывод объектов tag при связи многие ко многим, вынесем в отдельный шаблон:
		@php
			$tags = $tags ?? collect();  // такая конструкция для защиты передачи данных как коллекции
		@endphp

		@if($tags->isNotEmpty())
			<div>
				@foreach($tags as $tag)
					<a href='#' class='badge badge-secondary'>{{ $tag->name }}</a>
				@endforeach
			</div>
		@endif

		Когда мы будем подключать этот файл то:
			@include('tasks.tags', ['tags' => $task->tags]);


	Особености параметра value тега input при заполнении тегов:
		value="{{ old('tags', $task->tags->pluck('name')->implode(',')) }}" // здесь используется функция imlode действующая как разделитель массива в строку



