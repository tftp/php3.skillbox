Базовые концепции

	Сервис контейнеры
		сам класс Application  и есть сервис-контейнер. К нему обращаемся через app() или resolve().
		В качестве парраметра - объект который мы хотим получить:
			app(App\Task::class);
		Как разместить в этот сервис контейнер.
			app()->bind('example', function () {   //метод bind, парраметры название объекта и колбэк функция (вместо него можно использовать метод singleton
				return new App\Example;		//создание экземпляра класса Example мы привязали к ключу 'example'
			});

		если используем app('example'); app('example'); то создадим два разных объекта
		чтобы объект был типа singleton нужно при размещении в контейнер использовать метод не bind, а singleton
		
		необязательно привязывать объекты, можно получить новый класс написав:
			app(App\Example::class);

		если при размещении в сервис-контейнер мы напишем не 'example', а App\Example::class, то при обращении app(App\Example::class) выполнится колбэк
		функция, которую мы описали при размещении. Потому что ларавел сначала смотрит ключ в сервис контейнере и если его нет ищет объект с указаным именем.
		
		Примеры:

		app()->singleton(App\Service\Pushall::class, function() {
			return new App\Service\Pushall('private-key');
		});

		Route::get('/test', function (App\service\Pushall $pushall) {
			dd($pushall);
		});

		Если у нас есть интерфейс и классы от него зависящие
			interface PriceFormater { public class format;}
			class SimpleFormater implement PriceFormater
			class OtherFormater implement PriceFormater

			они по разному реализуют метод format

			зарегистрируем объект для контейнера:
				app()->bind(App\SimpleFormater::class, function () {
					return new App\SimpleFormaner();
				});

				Route::get('/test', function (App\SimpleFormater $formater) {
					dd($formater->format());
				});

			Но можно зарегистрировать зависимость на интерфейс, код изменится:
				app()->bind(App\PriceFormater::class, function () {
					return new App\SimpleFormaner(); // а здесь указываем конкретную реализацию, и её то можно оперативно менять на return new App\OtherFormater()
				});

				Route::get('/test', function (App\PriceFormater $formater) {
					dd($formater->format());
				});
		
		Использование сервис-контейнеров в классе через конструктор:
			    public function __construct(UserRepository $users)
				    {
 				       $this->users = $users;
    				}
		подробности https://laravel.com/docs/8.x/container#introduction 



	Автоматическое разрешение зависимостей
		Когда мы пытаемся подключить тот или иной объект в ларавел, он пытается самостоятельно определить что нам нужно и ищет это что то внутри сервис-контейнера.



	Сервис провайдеры - это блоки, с помощью которых компоненты регистрируют и выполняют свой код. 

		Стандартные провайдеры находятся в папке Providers, они зарегистрированны в конфигурации для выполнения, если мы создаем свой провайдер то
		его тоже нужно зарегистрировать config\app.php в ключе 'providers'

		Сервис провайдер содержит методы register - для регистрации объектов в сервис-контейнере, вызывается при каждой загрузке фреймворка, например
			$this->app->singelton(\App\Service\Pushall::class, function() {
				return new \App\Service\Pushall('private-key');
			});
			и в web.php проверим маршрутом 
				Router::get('/test', function(App\Service\Pushall $pushall) {
					dd($pushall);
				});

		Метод boot выполняет любой код.

		Создание отдельных сервис-провайдеров.
			php artisan make:provider PushallServiceProvider

			и в нем размещаем нужный нам код. незабываем зарегистрировать наш сервис-провайдер в configs\app.php

		Можно упаковывать свои компоненты в отдельные библиотеки и подключать их с помощью композера, используя провайдеры для регистрации и загрузки.


	Кофигурирование, Файлы конфигурации и Переменные окружения
		все вайлы конфигурации в папке config
		каждая конфигурация - ассоциативный массив
		функция env() достает данные из суперглобальной переменной $_ENV, куда попадают данные из .env из корня проекта

		Так как файл .env исклчена из контроля версий то каждая копия проекта должна содержать свой код .env

		Для использования данных из файла конфигурации:
			<title>{{ congig('ключ', 'значение по умолчанию') }}</title>
			ключ из файла app.php будет app.name

		Пример, добавим ключ в services.php:
			'pushall' => [
					'key' => 'some-private-key',
				],
		
		и в сервис провайдере поправим код:
			$this->app->singelton(\App\Service\Pushall::class, function() {
				return new \App\Service\Pushall('services.pushall.key');
			});

		Хранить ключ в services.php небезопасно поэтому перенесем его в переменную окружения:
			'pushall' => [
					'key' => env('PUSHALL_PRIVATE_KEY'),
				],
			
			а в .env допишем PUSHALL_PRIVATE_KEY='some-private-key'

		Можно создать свой файл конфигураций в директории config.

		Чтобы файлы загружались не по отдельности, а одним большим файлом (в боевом проекте) используем команду
		
			php artisan config:cache // создает кэш конфигурации и ускоряет загрузку
			php artisan config:clear // удаляет кэш конфигурации


	Midleware - слои приложения (делает некоторые действия или осуществляет фильтрацию http запроса)

		Слои находятся в папке middleware
		Файл Kernel.php - ядро запуска слоев. В нем есть следующие переменные запуска:

			$middleware - загружаются при каждом запуске приложения

			$middlewareGroups - загрузка по группам
			
			$routeMiddleware - именованные middleware, имена можно использовать для подключения например в роутинге

		Создание слоя:
			php artisan make:middleware CustomAuthenticate

			чтобы наш middleware выполнился на сайте нужно его зарегистрировать в Kernel.php

			пропишем логику в нашем middleware в методе handle. например:

				if (! $request->has('auth') && $request->getRequestUri() !== '/') {
					return redirect('/');
				}

			Способы привязки middleware к маршруту:

				Route::get('/test','TestController@index')->middleware('имя middleware заданное в $routeMiddleware'), или
				Route::get('/test','TestController@index')->middleware(\App\Http\Middleware\CustomAuthenticate::class)

				ещё способ - указать middleware в конструкторе контроллера:

					TestController:
						public function __construct() {
							$this->middleware('test'); // действует на все методы контроллера
						}																																																																																																																																										

							$this->middleware('test', ['only' => ['show']]); // действует только на метод show
							$this->middleware('test', ['except' => ['show']]); // действует кроме метода show

Авторизация. Политики.

	Метод, продемонстрированный в уроках, актуален только для Laravel 5, для версий 6+ выберите следующий вариант:
		для простого создания авторизации как в уроке вы можете использовать пакет (рекомендуется): laravel/ui; 
		также вы можете использовать пакет для реализации авторизации: laravel/fortify;
		или его реализацию вместе с ui: zacksmash/fortify-ui.

	авторизация устанавливается установкой https://github.com/laravel/ui

	в конструктор контроллера обычно добавляется строка на мидлваре, которая обеспечивает авторизацию
		$this->middleware('auth')
	
	много интересного про авторизацию можно найти здесь https://laravel.com/docs/8.x/authorization

	появились методы:
		auth()->id() // возвращает id авторизованного пользователя
		auth()->user()// возвращает пользователя
		auth()->check()// проверяет авторизован ли пользователь
		auth()->guest()//возвращает true если гость

	варианты ограничения доступа к редактированию задания без Политики:

		if ($task->owner_id !== auth()->id()) {
			abort(403);
		}

		-----------------------------------------

		abort_if($task->owner_id !== auth()->id(), 403);

	Политика. Policy.

		Создание политики с разной логикой к модели иконтроллеру Task: php artisan make:policy TaskPolicy --model=Task

		В методе update TaskPolicy реализуется логика выполнения обновления:

			return $this->id == $task->user_id;

		Далее нужно зарегистрировать политику в AuthServiceProvider:

			protected $policies = [
		        App\Models\Article::class => App\Policies\ArticlePolicy::class,
		    ];
			
		Далее можно использовать политику в разных вариантах при ограничении доступа к редактированию с Политикой:

			$this->authorize('update', $task);

		--------------------------------------

			использование Gate
		
			abort_if(\Gate::denies('update', $task), 403);

			или

			abort_unless(\Gate::allows('update', $task), 403);
			
		--------------------------------------

			abort_if(auth()->user()->cannot('update', $task), 403);


		--------------------------------------

			использование middleware. в конструкторе контроллера добавляем

				$this->middleware('can:update,article')->only(['edit', 'update']);

	И в шаблоне можно использовать директиву can которая ссылается на политику:

            @can('update', $article)
                <a href='{{route('articles.edit', ['article' => $article->code])}}' class='badge badge-secondary'>Изменить</a>
            @endcan

	Чтобы обойти политику например для Администратора можно в метод boot AuthServiceProvider добавить

		    public function boot(\Illuminate\Contracts\Auth\Access\Gate $gate)
 		   {
		        $this->registerPolicies();

		        $gate->before(function ($user) {
		            if ($user->isAdmin()) {
		                return true;
		            }
		        });
		    }

	в этом случае команда $gate->before выполняется прежде любой политики и игнорирует политику если условие истино и запрещает доступ если false.


	Для отображения только задач текущего пользователя в методе index напишем:

		$tasks = auth()->user()->tasks()->with('tags')->latest()->get();



Инструмент для разработчика Telescope
	Подробнее https://laravel.com/docs/8.x/telescope

	Возможно понадобится установить библиотеку sudo apt install php-bcmath

	В TelescopeServiceProvider в методе gate определяется правило использования телескопа, например:
		return $user->id == 1;

	Пока нажата кнопка play, telescope будет собирать информацию
	
	Если в контроллере методе index добавим dump($tasks); то в телескопе в закладке Dump можно увидеть вывод.


Отправка почтовых сообщений

	Пример 1, в методе store после создания задачи добавляем команду создания почтового отправления

		\Mail::to('user@email')->send(		// если использовать метод send то отправка идет синхронно, чтобы ипользовать очередь надо использовать queue()
			new TaskCreated($task); // объект класса Mail
		);

	Чтобы создать объект класса Mail надо

		php artisan make:mail TaskCreated ИЛИ php artisan make:mail TaskCreated -m 'mail.task-created' здесь создастся сразу view представление

		В папке mail создается класс TaskCreated создается класс с методом build в котором ссылка на представление view:

			return $this->markdown('mail.task-created');

		А сам почтовый шаблон mail.task-created мы можем изменять.

		ВАЖНО в файле .env нужно указать MAIL_DRIVER = log, что бы отслежывать данные при разработке

 		в TaskCreated добавляем конструктор принимающий $task:

			public function __constructor(Task $task)
				{ $this->task = $task;}

			при этом нужно определить public $task; потому что все публичные свойства класса Mail становятся автоматически
			доступными внутри его шаблона!
	
		Чтобы протестировать реальную отправку почты можно воспользоваться сервисом mailtrap.io и настроить конфигурацию в .env

	Выносим отправку почтовых уведомлений из контроллера

		Один из вариантов перенести этот код в "События в модели"

		Подробнее о событиях в модели https://laravel.com/docs/8.x/eloquent#events
		
		Чтобы добавить обработчик событий в модель используем модель Task
		
		в нем переопределяем метод boot:

			protected static function boot() 
			{
				parent::boot();
				
				static::created(function($task) {
					// так создается наш код к событию модели created
					// сюда переносим отправку уведомления
					\Mail::to('user@email')->send(
						new TaskCreated($task); 
					);
				});
			}


Система событий: Наблюдатель - Слушатель

	2 Способ отправки уведомления это создание полноценого события

		Создание события php artisan make:event TaskCreated

		Создается в папке Event класс события TaskCreated, всё что связано с ВебСокетами можно убрать для упрощения

		В нем осталя только конструктор. Делаем в классе публичное свойство $task и через конструктор его заполняем.

		Чтобы воспользоваться событием в Контроллере добавляем команду вызова события
		
			event(new TaskCreated($task)); // здесь TaskCreated это название события event

		Но чтобы событие реализовалось нужно добавить СЛУШАТЕЛЯ
		
			php artisan make:listener SendTaskCreatedNotification --event='TaskCreated' // связываем его с событием

				слушателя надо называть так чтоб было понятно что он делает

		В слушателя добавим код из метода boot модели Task написаный выше а из модели его уберём

			public function handle(TaskCreated $event)
			{
				\Mail::to('user@email')->send(
					new \App\Mail\TaskCreated($event->task); 
				);
			}

		Также нужно зарегистрировать связь Наблюдателя со Слушателем в EventServiceProvider

			    protected $listen = [
        			Registered::class => [
		            	SendEmailVerificationNotification::class,
        			],
					TaskCreated::class => [
						SendTaskCreatedNotification::class,
					],
			    ];

	Вместо использования контроллера можно использовать систему событий в Моделях

		Для этого убираем из контроллера event а в модель добавляем

			protected $dispatchesEvent = [
				'created' => TaskCreated::class, // ключ - название события в модели, а значением - событие event
			];

Уведомления - Notification 

	Создание уведомления: php artisan make:notification TaskStepComplited // название уведомления должно отвечать его смыслу

	Создается класс в котором в методе via указываются каналы, которым отправляется уведомление, по умолчанию на почту,
	при этом почтовое уведомление будет сформировано по методу toMail.

	Остальные методы определяют способ отправки уведомлений.

	В классе User появился трейт use Notifiable, который позволяет использовать метод notify():

		$user->notify(new TaskStepComplited);

		В качестве параметра указывается уведомление, которое нужно отправить пользователю.

	Если мы хотим отправить уведомление не только на mail  но и database то в метод via добавляем:

		return ['mail', 'database'];

		Для этого ещё нужно создать таблицу в БД для сохранения уведомлений командой

			php artisan notifications:table

			php artisan migrate

		Также надо создать метод toDatabase или toArray

	Пользователь имеет автоматически связь $user->notifications со всеми уведомлениями для пользователя

	Что бы сделать уведомление прочитаным $user->notifications->first()->markAsRead()

	Или непрочитаным $user->notifications->first()->markAsUnread()
	
	Список прочитанных уведомлений 	$user->readNotifications

	Список непрочитанных уведомлений 	$user->unreadNotifications


Сессии

	Положить что то в сессию session(['name' => ''test']);

	Достать из сессии session(['name']); или session()->get('name'); или session()->get('name', 'defaultValue');

	Удаление данных из сессии session()->forget('name');

	Проверка ключа session()->has('name');

	Можно достать сессию из запроса $request->session()->all();

	Специальный метод сохраняет данные сессии на один следующий страничный переход: 
	
		session()->flash('message', 'Задача успешно создана');

	Пример создания функции flash:

		function flash($message, $type = 'success') {
			session()->flash('message', $message);
			session()->flash('type', $type);
		}

	В директории app создаем файл helpers.php, в него помещаем нашу функцию:

		if (! function_exists('flash')) {
			function flash($message, $type = 'success') {
				session()->flash('message', $message);
				session()->flash('type', $type);
			}
		}
	
	Чтобы подключить файл в composer.json добавим в автоподгрузку

		"files": ["app/helpers.php"]

		но незабываем выполнить команду composer dump-autoload


