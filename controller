Контроллеры.
	php artisan make:controller TasksController

	привязка моделей к контроллерам
	Если мы напишем в контроллере метод show, который по id выводит задание:
		public function show($id)
		{
			$task = App\Task::find($id);
			return $task;
		}

	можно написать по другому с приязкой к модели
		public function show(Task $task)
		{
			return $task;
		}
	но чтобы всё работало нужно чтоб имя параметра в маршруте совпадало с именем переменной
		Route::get('/tasks/{task}', 'TasksController@show');

	Можно переопределить поведение поиска элемента (которое происходит в контроллере):
		добавить функцию в модели
		public function getRouteKeyName()
		{
			return 'id'; //указываем какое поле БД надо вернуть
		}

	При обработке данных форм есть метод request:
		request()->get('title'); или
		request('title');

	Редирект командой
		return redirect('/tasks');

	Создание нового объекта
		Можно создавать так:
			Task::create([
				'title' => request('title'),
				'body' => request('body')
			]);
		но для этого в модели надо задать список полей. которые разрешены для массового заполнения:
			public $fillable = ['title', 'body'];
			или
			public $guarded = []; //здесь указываем поля, которые НЕ разрешены для массового заполнения
		или это свойство вынести в новый класс Model(который наследует старый Model), который наследуют все модели.
		И тогда верхний запрос на сохранение можно упростить ещё сильнее:
			Task:create(request()->all());

Валидация в контроллере
	$this->validate(request(), [
		'title' => 'required | max: 40 | min: 10',
		'boxdy' => 'required',
	]);
	Подробнее на https://laravel.com/docs/8.x/validation#introduction


	Можно использовать такой вариант валидации, в котором возвращается массив данных:
	$atributes = $request()->validate([
		'title' => 	'required',
		'body' => 'required',
	]);
	И далее использовать их для обновления:
	$task->update($attributes);

Пример использования динамического метода:
	public function update(Step $step)
	{
		$method = request()->has('completed') ? 'complete' : 'incomplete';
		$step->{$method}();

		return back();
	}
	// здесь 'complete' и 'incomlete' - методы реализованые в модели Step




Передача данных - 3 разных варианта:
	return view('welcom', ['name' => $name]);
	return view('welcom')->with('name' => $name);
	return view('welcom', compact('name'));

При связи многие ко многим и обращении объекта Task к tag связям, делается лишний запрос к БД,
чтобы этого избежать объекты Task можно вызвать сразу с tag:
		$tasks = Task::with('tags')->latest()->get();

Пример работы с данными:
	$taskTags = $task->tags->keyBy('name');
	
	$tags = collect(explode(',', request('tags')))->keyBy(function ($item) {return $item; });
	
	$tagsToAttach = $tags->diffKeys($taskTags);
	$tagsToDetach = $taskTags->diffKey($tags);

	forech ($tagsToAttach as $tag) {
		$tag = Tag::firstOrCreate(['name' => $tag]);
		$task->tags()->attach($tag); // метод добавления объекта связи													
	}

	foreach ($tagsToDetach as $tag) {
		$task->tags->detach($tag); // метод удаления объекта  из связи, есть ещё метод synс() который принимает id всех объектов и те, которые указаны добавляет, а которые не указаны удаляет.
	}

Этот код можно заменить на следующий идентичный:
	
	$taskTags = $task->tags->keyBy('name');
	
	$tags = collect(explode(',', request('tags')))->keyBy(function ($item) {return $item; });
	
	$syncIds = $taskTags->intersectByKeys($tags)->pluck('id')->toArray();

	$tagsToAttach = $tags->diffKeys($taskTags);

	forech ($tagsToAttach as $tag) {
		$tag = Tag::firstOrCreate(['name' => $tag]);

		$syncIds[] = $tag->id;
	}

	$task->tags()->sync($syncIds);

Если мы хотим использовать переменную, которая должна быть на всех страницах (например в боковом меню), нужно использовать сервис-провайдеры.
	Открываем Providers/AppServiceProvider, здесь есть два метода boot и register.
	Используем загрузку нашей переменной в методе boot:
	добавим команду:
		view()->composer('layout.sidebar', function ($view) {  // в кчестве шаблона можно указать * , для использования всех шаблонов. 
			$view->with('tagsCloud', \App\Tag::has('tasks')->get()); // вот так передаем переменную $tagsCloud  во все шаблоны нашего сайта
			// has('tasks') означает, что будут выбраны те тэги  для которых есть хотябы одна привязаная задача, можно вынести в модель
			// или $view->with('tagsCloud', \App\Tag::tagsCloud());
		});

